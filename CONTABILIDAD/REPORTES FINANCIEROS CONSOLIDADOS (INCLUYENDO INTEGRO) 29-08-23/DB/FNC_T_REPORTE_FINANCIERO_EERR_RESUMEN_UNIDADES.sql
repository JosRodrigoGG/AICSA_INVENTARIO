CREATE OR REPLACE FUNCTION SAF.FNC_T_REPORTE_FINANCIERO_EERR_RESUMEN_UNIDADES
(
	V_MES_INICIO NUMBER DEFAULT 1,
	V_MES_FIN NUMBER,
	V_ANIO NUMBER DEFAULT TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY')),
	V_MONEDA NUMBER DEFAULT 1,
	V_VERSION NUMBER DEFAULT 2020
)
RETURN T_REPORTE_FINANCIERO_EERR_CXU AS
    V_T_REPORTE_FINANCIERO_EERR_CXU T_REPORTE_FINANCIERO_EERR_CXU := T_REPORTE_FINANCIERO_EERR_CXU();

	CURSOR C_DATOS IS
		WITH ESTRUCTURA_UNIDADES AS
		(
			SELECT
				ROW_NUMBER() OVER (ORDER BY ID ASC) AS NUMERO_LINEA,
				ID,
				ID_SECCION,
				NOMBRE_SECCION,
				CODIGO_DIVISION,
				TIPO
			FROM
			(
				SELECT
					TO_CHAR(ID) ID,
					ID_SECCION,
					NOMBRE_SECCION,
					CODIGO_DIVISION,
					TIPO
				FROM(
					SELECT
						A.ID,
						A.ID_ASOCIACION ID_SECCION,
						B.NOMBRE_SECCION,
						B.CODIGO_DIVISION,
						1 TIPO
					FROM SAF.REPORTES_FINANCIEROS_CONFIGURACION A
					INNER JOIN SAF.GRAL_SECCIONES B ON B.CODIGO_SECCION = A.ID_ASOCIACION
					INNER JOIN SAF.GRAL_DIVISIONES C ON C.CODIGO_DIVISION = B.CODIGO_DIVISION
					WHERE A.TIPO_REPORTE = 55
					ORDER BY A.ID_ASOCIACION ASC
				)
				UNION ALL
				SELECT
					'OTROS' ID,
					NULL ID_SECCION,
					'Otros' NOMBRE_SECCION,
					NULL CODIGO_DIVISION,
					2 TIPO
				FROM DUAL
				UNION ALL
				SELECT
					'RSE' ID,
					NULL ID_SECCION,
					'BackOffice (Gastos Gerenciales) (RSE)' NOMBRE_SECCION,
					NULL CODIGO_DIVISION,
					3 TIPO
				FROM DUAL
			)
		), MESES_TABLE AS 
		(
			SELECT LEVEL AS NUMERO
			FROM DUAL
			CONNECT BY LEVEL <= GREATEST(V_MES_FIN)
		), CODIGO_SECCIONES_DIVISION AS
		(
			SELECT
				A.ID_ASOCIACION ID_SECCION,
				B.CODIGO_DIVISION,
				(
					CASE
						WHEN A.TIPO_REPORTE = 55 THEN
							1
						WHEN A.TIPO_REPORTE = 56 THEN
							2
						WHEN A.TIPO_REPORTE = 57 THEN
							3
						ELSE
							1
					END
				) TIPO
			FROM SAF.REPORTES_FINANCIEROS_CONFIGURACION A
			INNER JOIN SAF.GRAL_SECCIONES B ON B.CODIGO_SECCION = A.ID_ASOCIACION
			WHERE A.TIPO_REPORTE IN (55, 56, 57)
		), ESTRUCTURA AS
		(
			SELECT
				ROWNUM ID,
				NOMBRE,
				CLASE,
				ID_REGISTRO
			FROM
			(
				SELECT 
					NOMBRE,
					NULL CLASE,
					ID ID_REGISTRO
				FROM SAF.PLANTILLA_ASIGNACION_NOTAS
				WHERE TIPO_REPORTE = 6
				AND ORDEN_1 = 'MargenBruto'
				UNION ALL
				SELECT
					'Margen Bruto',
					'font-weight: bold;',
					NULL
				FROM DUAL
				UNION ALL
				SELECT 
					NOMBRE,
					NULL CLASE,
					ID
				FROM SAF.PLANTILLA_ASIGNACION_NOTAS
				WHERE TIPO_REPORTE = 6
				AND ORDEN_1 = 'ResultadosEnOperacion'
				UNION ALL
				SELECT
					'Resultados En Operacion',
					'font-weight: bold;',
					NULL
				FROM DUAL
				UNION ALL
				SELECT 
					NOMBRE,
					NULL CLASE,
					ID
				FROM SAF.PLANTILLA_ASIGNACION_NOTAS
				WHERE TIPO_REPORTE = 6
				AND ORDEN_1 = 'Resultado'
				UNION ALL
				SELECT
					'Resultado',
					'font-weight: bold;',
					NULL
				FROM DUAL
				UNION ALL
				SELECT 
					NOMBRE,
					NULL CLASE,
					ID
				FROM SAF.PLANTILLA_ASIGNACION_NOTAS
				WHERE TIPO_REPORTE = 6
				AND ORDEN_1 = 'EBITDA'
				UNION ALL
				SELECT
					'EBITDA',
					'font-weight: bold;',
					NULL
				FROM DUAL
				UNION ALL
				SELECT 
					NOMBRE,
					NULL CLASE,
					ID
				FROM SAF.PLANTILLA_ASIGNACION_NOTAS
				WHERE TIPO_REPORTE = 6
				AND ORDEN_1 = 'ResultadosAntesOtrosIngresosGastos'
				UNION ALL
				SELECT
					'Resultados Antes de Otros Ingresos y Gastos',
					'font-weight: bold;',
					NULL
				FROM DUAL
				UNION ALL
				SELECT 
					NOMBRE,
					NULL CLASE,
					ID
				FROM SAF.PLANTILLA_ASIGNACION_NOTAS
				WHERE TIPO_REPORTE = 6
				AND ORDEN_1 = 'ResultadosAntesImpuestos'
				UNION ALL
				SELECT
					'Resultados Antes de Impuestos',
					'font-weight: bold;',
					NULL
				FROM DUAL
			)
		), VALORES AS
		(
			SELECT
				A.ID,
				A.NOMBRE,
				E.MES,
				E.CODIGO_DIVISION,
				NVL(SUM((
					CASE
						WHEN A.ID NOT IN (3, 5, 7, 10, 12, 16) THEN
							SAF.CON_CARDINALIDAD_CTA_VALOR(E.COD_CTA, D.VERSION, E.DB_HB, SAF.APX_FNC_CONVERSION_MONEDAS(NVL(E.VALOR, 0), 1, V_MONEDA, 1, NULL))
						ELSE
							0
					END
				)), 0) AS VALOR
			FROM ESTRUCTURA A
			LEFT JOIN SAF.ASOCIACION_PLANTILLA_NOTA_VERSION B ON
				B.ID_PLANTILLA = A.ID_REGISTRO AND
				B.VERSION = V_VERSION
			LEFT JOIN SAF.CON_PLANTILLA_NOTAS C ON
				C.ID = B.ID_NOTA
			LEFT JOIN SAF.CON_DETALLE_PLANTILLA_NOTAS D ON
				D.ID_PLANTILLA = C.ID AND
				D.VERSION = B.VERSION AND
				D.ES_AGRUPADOR = 'N'
			LEFT JOIN SAF.CON_POLIZASD E ON
				E.COD_CTA = D.COD_CTA AND
				E.CODIGO_GASTO = D.CODIGO_GASTO AND
				E.COD_TIPOL != 30 AND
				E.EJERCICIO = V_ANIO AND
				E.MES BETWEEN V_MES_INICIO AND V_MES_FIN AND
				E.CODIGO_EMPRESA > 99
			WHERE E.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION)
			GROUP BY A.ID, A.NOMBRE, E.CODIGO_DIVISION, E.MES
			UNION ALL
			SELECT
				A.ID,
				A.NOMBRE,
				B.MES_FIN MES,
				C.CODIGO_DIVISION,
				NVL(SUM((
					CASE
						WHEN A.ID NOT IN (3, 5, 7, 10, 12, 16) THEN
							SAF.APX_FNC_CONVERSION_MONEDAS(NVL(B.VALOR, 0), B.MONEDA_ORIGEN, V_MONEDA, B.VALOR_CAMBIO, NULL)
						ELSE
							0
					END
				)), 0) AS VALOR
			FROM ESTRUCTURA A
			LEFT JOIN SAF.REPORTES_FINANCIEROS_INTEGRO B 
				ON B.ID_PLANTILLA_NOTA = A.ID_REGISTRO 
				AND B.TIPO_REPORTE = 6
				AND B.MES_FIN BETWEEN V_MES_INICIO AND V_MES_FIN
				AND B.ANIO = V_ANIO
				AND B.CONCEPTO IS NULL
			LEFT JOIN SAF.GRAL_SECCIONES C
				ON C.CODIGO_SECCION = B.CODIGO_EMPRESA
			WHERE C.CODIGO_DIVISION IN
			(
				SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION
			)
			GROUP BY A.ID, A.NOMBRE, C.CODIGO_DIVISION, B.MES_FIN
		), CALCULO_BLOQUE_1 AS
		(
			SELECT
				A.NUMERO_LINEA,
				A.ID_SECCION,
				A.NOMBRE_SECCION,
				M.NUMERO MES,
				0 VALOR
			FROM ESTRUCTURA_UNIDADES A
			CROSS JOIN MESES_TABLE M
			WHERE M.NUMERO >= V_MES_INICIO AND M.NUMERO <= V_MES_FIN
			AND A.TIPO = 1
			UNION ALL
			SELECT
				A.NUMERO_LINEA,
				A.ID_SECCION,
				A.NOMBRE_SECCION,
				M.NUMERO MES,
				(
					(NVL(SUM(B.VALOR), 0) + NVL(SUM(K.VALOR), 0))
					-
					(NVL(SUM(C.VALOR), 0) + NVL(SUM(D.VALOR), 0) + NVL(SUM(E.VALOR), 0) + NVL(SUM(F.VALOR), 0) 
						+ NVL(SUM(G.VALOR), 0) + NVL(SUM(H.VALOR), 0) + NVL(SUM(I.VALOR), 0) + NVL(SUM(J.VALOR), 0))
				) VALOR
			FROM ESTRUCTURA_UNIDADES A
			CROSS JOIN MESES_TABLE M
			LEFT JOIN VALORES B 
				ON B.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND B.MES = M.NUMERO
				AND B.ID = 1
			LEFT JOIN VALORES C
				ON C.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND C.MES = M.NUMERO
				AND C.ID = 2
			LEFT JOIN VALORES D
				ON D.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND D.MES = M.NUMERO
				AND D.ID = 4
			LEFT JOIN VALORES E
				ON E.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND E.MES = M.NUMERO
				AND E.ID = 6
			LEFT JOIN VALORES F
				ON F.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND F.MES = M.NUMERO
				AND F.ID = 8
			LEFT JOIN VALORES G 
				ON G.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND G.MES = M.NUMERO
				AND G.ID = 9
			LEFT JOIN VALORES H
				ON H.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND H.MES = M.NUMERO
				AND H.ID = 11
			LEFT JOIN VALORES I
				ON I.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND I.MES = M.NUMERO
				AND I.ID = 14
			LEFT JOIN VALORES J
				ON J.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND J.MES = M.NUMERO
				AND J.ID = 15
			LEFT JOIN VALORES K
				ON K.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND K.MES = M.NUMERO
				AND K.ID = 13
			WHERE M.NUMERO >= V_MES_INICIO AND M.NUMERO <= V_MES_FIN
			AND A.TIPO = 1
			GROUP BY A.ID_SECCION, A.NOMBRE_SECCION, M.NUMERO, A.NUMERO_LINEA
		), CALCULO_BLOQUE_2 AS
		(
			SELECT
				A.NUMERO_LINEA,
				A.ID_SECCION,
				A.NOMBRE_SECCION,
				M.NUMERO MES,
				0 VALOR
			FROM ESTRUCTURA_UNIDADES A
			CROSS JOIN MESES_TABLE M
			WHERE M.NUMERO >= V_MES_INICIO AND M.NUMERO <= V_MES_FIN
			AND A.TIPO = 2
			UNION ALL
			SELECT
				A.NUMERO_LINEA,
				A.ID_SECCION,
				A.NOMBRE_SECCION,
				M.NUMERO MES,
				(
					(NVL(SUM(B.VALOR), 0) + NVL(SUM(K.VALOR), 0))
					-
					(NVL(SUM(C.VALOR), 0) + NVL(SUM(D.VALOR), 0) + NVL(SUM(E.VALOR), 0) + NVL(SUM(F.VALOR), 0) 
						+ NVL(SUM(G.VALOR), 0) + NVL(SUM(H.VALOR), 0) + NVL(SUM(I.VALOR), 0) + NVL(SUM(J.VALOR), 0))
				) VALOR
			FROM ESTRUCTURA_UNIDADES A
			CROSS JOIN MESES_TABLE M
			LEFT JOIN VALORES B 
				ON B.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND B.MES = M.NUMERO
				AND B.ID = 1
			LEFT JOIN VALORES C
				ON C.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND C.MES = M.NUMERO
				AND C.ID = 2
			LEFT JOIN VALORES D
				ON D.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND D.MES = M.NUMERO
				AND D.ID = 4
			LEFT JOIN VALORES E
				ON E.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND E.MES = M.NUMERO
				AND E.ID = 6
			LEFT JOIN VALORES F
				ON F.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND F.MES = M.NUMERO
				AND F.ID = 8
			LEFT JOIN VALORES G 
				ON G.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND G.MES = M.NUMERO
				AND G.ID = 9
			LEFT JOIN VALORES H
				ON H.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND H.MES = M.NUMERO
				AND H.ID = 11
			LEFT JOIN VALORES I
				ON I.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND I.MES = M.NUMERO
				AND I.ID = 14
			LEFT JOIN VALORES J
				ON J.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND J.MES = M.NUMERO
				AND J.ID = 15
			LEFT JOIN VALORES K
				ON K.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND K.MES = M.NUMERO
				AND K.ID = 13
			WHERE M.NUMERO >= V_MES_INICIO AND M.NUMERO <= V_MES_FIN
			AND A.TIPO = 2
			GROUP BY A.ID_SECCION, A.NOMBRE_SECCION, M.NUMERO, A.NUMERO_LINEA
		), CALCULO_BLOQUE_3 AS
		(
			SELECT
				A.NUMERO_LINEA,
				A.ID_SECCION,
				A.NOMBRE_SECCION,
				M.NUMERO MES,
				0 VALOR
			FROM ESTRUCTURA_UNIDADES A
			CROSS JOIN MESES_TABLE M
			WHERE M.NUMERO >= V_MES_INICIO AND M.NUMERO <= V_MES_FIN
			AND A.TIPO = 3
			UNION ALL
			SELECT
				A.NUMERO_LINEA,
				A.ID_SECCION,
				A.NOMBRE_SECCION,
				M.NUMERO MES,
				(
					(NVL(SUM(B.VALOR), 0) + NVL(SUM(K.VALOR), 0))
					-
					(NVL(SUM(C.VALOR), 0) + NVL(SUM(D.VALOR), 0) + NVL(SUM(E.VALOR), 0) + NVL(SUM(F.VALOR), 0) 
						+ NVL(SUM(G.VALOR), 0) + NVL(SUM(H.VALOR), 0) + NVL(SUM(I.VALOR), 0) + NVL(SUM(J.VALOR), 0))
				) VALOR
			FROM ESTRUCTURA_UNIDADES A
			CROSS JOIN MESES_TABLE M
			LEFT JOIN VALORES B 
				ON B.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND B.MES = M.NUMERO
				AND B.ID = 1
			LEFT JOIN VALORES C
				ON C.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND C.MES = M.NUMERO
				AND C.ID = 2
			LEFT JOIN VALORES D
				ON D.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND D.MES = M.NUMERO
				AND D.ID = 4
			LEFT JOIN VALORES E
				ON E.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND E.MES = M.NUMERO
				AND E.ID = 6
			LEFT JOIN VALORES F
				ON F.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND F.MES = M.NUMERO
				AND F.ID = 8
			LEFT JOIN VALORES G 
				ON G.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND G.MES = M.NUMERO
				AND G.ID = 9
			LEFT JOIN VALORES H
				ON H.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND H.MES = M.NUMERO
				AND H.ID = 11
			LEFT JOIN VALORES I
				ON I.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND I.MES = M.NUMERO
				AND I.ID = 14
			LEFT JOIN VALORES J
				ON J.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND J.MES = M.NUMERO
				AND J.ID = 15
			LEFT JOIN VALORES K
				ON K.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND K.MES = M.NUMERO
				AND K.ID = 13
			WHERE M.NUMERO >= V_MES_INICIO AND M.NUMERO <= V_MES_FIN
			AND A.TIPO = 3
			GROUP BY A.ID_SECCION, A.NOMBRE_SECCION, M.NUMERO, A.NUMERO_LINEA
		)
		SELECT
			NUMERO_LINEA,
			ID_SECCION,
			NOMBRE_SECCION,
			MES,
			VALOR
		FROM CALCULO_BLOQUE_1
		UNION ALL
		SELECT
			NUMERO_LINEA,
			ID_SECCION,
			NOMBRE_SECCION,
			MES,
			VALOR
		FROM CALCULO_BLOQUE_2
		UNION ALL
		SELECT
			NUMERO_LINEA,
			ID_SECCION,
			NOMBRE_SECCION,
			MES,
			VALOR
		FROM CALCULO_BLOQUE_3;
	
	CURSOR C_DATOS_HOMOLOGADAS IS
		WITH ESTRUCTURA_UNIDADES AS
		(
			SELECT
				ROW_NUMBER() OVER (ORDER BY ID ASC) AS NUMERO_LINEA,
				ID,
				ID_SECCION,
				NOMBRE_SECCION,
				CODIGO_DIVISION,
				TIPO
			FROM
			(
				SELECT
					TO_CHAR(ID) ID,
					ID_SECCION,
					NOMBRE_SECCION,
					CODIGO_DIVISION,
					TIPO
				FROM(
					SELECT
						A.ID,
						A.ID_ASOCIACION ID_SECCION,
						B.NOMBRE_SECCION,
						B.CODIGO_DIVISION,
						1 TIPO
					FROM SAF.REPORTES_FINANCIEROS_CONFIGURACION A
					INNER JOIN SAF.GRAL_SECCIONES B ON B.CODIGO_SECCION = A.ID_ASOCIACION
					INNER JOIN SAF.GRAL_DIVISIONES C ON C.CODIGO_DIVISION = B.CODIGO_DIVISION
					WHERE A.TIPO_REPORTE = 55
					ORDER BY A.ID_ASOCIACION ASC
				)
				UNION ALL
				SELECT
					'OTROS' ID,
					NULL ID_SECCION,
					'Otros' NOMBRE_SECCION,
					NULL CODIGO_DIVISION,
					2 TIPO
				FROM DUAL
				UNION ALL
				SELECT
					'RSE' ID,
					NULL ID_SECCION,
					'BackOffice (Gastos Gerenciales) (RSE)' NOMBRE_SECCION,
					NULL CODIGO_DIVISION,
					3 TIPO
				FROM DUAL
			)
		), MESES_TABLE AS 
		(
			SELECT LEVEL AS NUMERO
			FROM DUAL
			CONNECT BY LEVEL <= GREATEST(V_MES_FIN)
		), CODIGO_SECCIONES_DIVISION AS
		(
			SELECT
				A.ID_ASOCIACION ID_SECCION,
				B.CODIGO_DIVISION,
				(
					CASE
						WHEN A.TIPO_REPORTE = 55 THEN
							1
						WHEN A.TIPO_REPORTE = 56 THEN
							2
						WHEN A.TIPO_REPORTE = 57 THEN
							3
						ELSE
							1
					END
				) TIPO
			FROM SAF.REPORTES_FINANCIEROS_CONFIGURACION A
			INNER JOIN SAF.GRAL_SECCIONES B ON B.CODIGO_SECCION = A.ID_ASOCIACION
			WHERE A.TIPO_REPORTE IN (55, 56, 57)
		), ESTRUCTURA AS
		(
			SELECT
				ROWNUM ID,
				NOMBRE,
				CLASE,
				ID_REGISTRO
			FROM
			(
				SELECT 
					NOMBRE,
					NULL CLASE,
					ID ID_REGISTRO
				FROM SAF.PLANTILLA_ASIGNACION_NOTAS
				WHERE TIPO_REPORTE = 6
				AND ORDEN_1 = 'MargenBruto'
				UNION ALL
				SELECT
					'Margen Bruto',
					'font-weight: bold;',
					NULL
				FROM DUAL
				UNION ALL
				SELECT 
					NOMBRE,
					NULL CLASE,
					ID
				FROM SAF.PLANTILLA_ASIGNACION_NOTAS
				WHERE TIPO_REPORTE = 6
				AND ORDEN_1 = 'ResultadosEnOperacion'
				UNION ALL
				SELECT
					'Resultados En Operacion',
					'font-weight: bold;',
					NULL
				FROM DUAL
				UNION ALL
				SELECT 
					NOMBRE,
					NULL CLASE,
					ID
				FROM SAF.PLANTILLA_ASIGNACION_NOTAS
				WHERE TIPO_REPORTE = 6
				AND ORDEN_1 = 'Resultado'
				UNION ALL
				SELECT
					'Resultado',
					'font-weight: bold;',
					NULL
				FROM DUAL
				UNION ALL
				SELECT 
					NOMBRE,
					NULL CLASE,
					ID
				FROM SAF.PLANTILLA_ASIGNACION_NOTAS
				WHERE TIPO_REPORTE = 6
				AND ORDEN_1 = 'EBITDA'
				UNION ALL
				SELECT
					'EBITDA',
					'font-weight: bold;',
					NULL
				FROM DUAL
				UNION ALL
				SELECT 
					NOMBRE,
					NULL CLASE,
					ID
				FROM SAF.PLANTILLA_ASIGNACION_NOTAS
				WHERE TIPO_REPORTE = 6
				AND ORDEN_1 = 'ResultadosAntesOtrosIngresosGastos'
				UNION ALL
				SELECT
					'Resultados Antes de Otros Ingresos y Gastos',
					'font-weight: bold;',
					NULL
				FROM DUAL
				UNION ALL
				SELECT 
					NOMBRE,
					NULL CLASE,
					ID
				FROM SAF.PLANTILLA_ASIGNACION_NOTAS
				WHERE TIPO_REPORTE = 6
				AND ORDEN_1 = 'ResultadosAntesImpuestos'
				UNION ALL
				SELECT
					'Resultados Antes de Impuestos',
					'font-weight: bold;',
					NULL
				FROM DUAL
			)
		), VALORES AS
		(
			SELECT
				A.ID,
				A.NOMBRE,
				E.MES,
				E.CODIGO_DIVISION,
				NVL(SUM((
					CASE
						WHEN A.ID NOT IN (3, 5, 7, 10, 12, 16) THEN
							SAF.CON_CARDINALIDAD_CTA_VALOR(E.COD_CTA, D.VERSION, E.DB_HB, SAF.APX_FNC_CONVERSION_MONEDAS(NVL(E.VALOR, 0), 1, V_MONEDA, 1, NULL))
						ELSE
							0
					END
				)), 0) AS VALOR
			FROM ESTRUCTURA A
			LEFT JOIN SAF.ASOCIACION_PLANTILLA_NOTA_VERSION B ON
				B.ID_PLANTILLA = A.ID_REGISTRO AND
				B.VERSION = V_VERSION
			LEFT JOIN SAF.CON_PLANTILLA_NOTAS C ON
				C.ID = B.ID_NOTA
			LEFT JOIN SAF.CON_DETALLE_PLANTILLA_NOTAS D ON
				D.ID_PLANTILLA = C.ID AND
				D.VERSION = B.VERSION AND
				D.ES_AGRUPADOR = 'N'
			LEFT JOIN SAF.CON_POLIZASD E ON
				E.COD_CTA_HOMOLOGADA = D.COD_CTA AND
				--E.CODIGO_GASTO = D.CODIGO_GASTO AND
				E.COD_TIPOL != 30 AND
				E.EJERCICIO = V_ANIO AND
				E.MES BETWEEN V_MES_INICIO AND V_MES_FIN AND
				E.CODIGO_EMPRESA > 99
			WHERE E.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION)
			GROUP BY A.ID, A.NOMBRE, E.CODIGO_DIVISION, E.MES
			UNION ALL
			SELECT
				A.ID,
				A.NOMBRE,
				B.MES_FIN MES,
				C.CODIGO_DIVISION,
				NVL(SUM((
					CASE
						WHEN A.ID NOT IN (3, 5, 7, 10, 12, 16) THEN
							SAF.APX_FNC_CONVERSION_MONEDAS(NVL(B.VALOR, 0), B.MONEDA_ORIGEN, V_MONEDA, B.VALOR_CAMBIO, NULL)
						ELSE
							0
					END
				)), 0) AS VALOR
			FROM ESTRUCTURA A
			LEFT JOIN SAF.REPORTES_FINANCIEROS_INTEGRO B 
				ON B.ID_PLANTILLA_NOTA = A.ID_REGISTRO 
				AND B.TIPO_REPORTE = 6
				AND B.MES_FIN BETWEEN V_MES_INICIO AND V_MES_FIN
				AND B.ANIO = V_ANIO
				AND B.CONCEPTO IS NULL
			LEFT JOIN SAF.GRAL_SECCIONES C
				ON C.CODIGO_SECCION = B.CODIGO_EMPRESA
			WHERE C.CODIGO_DIVISION IN
			(
				SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION
			)
			GROUP BY A.ID, A.NOMBRE, C.CODIGO_DIVISION, B.MES_FIN
		), CALCULO_BLOQUE_1 AS
		(
			SELECT
				A.NUMERO_LINEA,
				A.ID_SECCION,
				A.NOMBRE_SECCION,
				M.NUMERO MES,
				0 VALOR
			FROM ESTRUCTURA_UNIDADES A
			CROSS JOIN MESES_TABLE M
			WHERE M.NUMERO >= V_MES_INICIO AND M.NUMERO <= V_MES_FIN
			AND A.TIPO = 1
			UNION ALL
			SELECT
				A.NUMERO_LINEA,
				A.ID_SECCION,
				A.NOMBRE_SECCION,
				M.NUMERO MES,
				(
					(NVL(SUM(B.VALOR), 0) + NVL(SUM(K.VALOR), 0))
					-
					(NVL(SUM(C.VALOR), 0) + NVL(SUM(D.VALOR), 0) + NVL(SUM(E.VALOR), 0) + NVL(SUM(F.VALOR), 0) 
						+ NVL(SUM(G.VALOR), 0) + NVL(SUM(H.VALOR), 0) + NVL(SUM(I.VALOR), 0) + NVL(SUM(J.VALOR), 0))
				) VALOR
			FROM ESTRUCTURA_UNIDADES A
			CROSS JOIN MESES_TABLE M
			LEFT JOIN VALORES B 
				ON B.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND B.MES = M.NUMERO
				AND B.ID = 1
			LEFT JOIN VALORES C
				ON C.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND C.MES = M.NUMERO
				AND C.ID = 2
			LEFT JOIN VALORES D
				ON D.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND D.MES = M.NUMERO
				AND D.ID = 4
			LEFT JOIN VALORES E
				ON E.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND E.MES = M.NUMERO
				AND E.ID = 6
			LEFT JOIN VALORES F
				ON F.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND F.MES = M.NUMERO
				AND F.ID = 8
			LEFT JOIN VALORES G 
				ON G.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND G.MES = M.NUMERO
				AND G.ID = 9
			LEFT JOIN VALORES H
				ON H.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND H.MES = M.NUMERO
				AND H.ID = 11
			LEFT JOIN VALORES I
				ON I.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND I.MES = M.NUMERO
				AND I.ID = 14
			LEFT JOIN VALORES J
				ON J.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND J.MES = M.NUMERO
				AND J.ID = 15
			LEFT JOIN VALORES K
				ON K.CODIGO_DIVISION = A.CODIGO_DIVISION
				AND K.MES = M.NUMERO
				AND K.ID = 13
			WHERE M.NUMERO >= V_MES_INICIO AND M.NUMERO <= V_MES_FIN
			AND A.TIPO = 1
			GROUP BY A.ID_SECCION, A.NOMBRE_SECCION, M.NUMERO, A.NUMERO_LINEA
		), CALCULO_BLOQUE_2 AS
		(
			SELECT
				A.NUMERO_LINEA,
				A.ID_SECCION,
				A.NOMBRE_SECCION,
				M.NUMERO MES,
				0 VALOR
			FROM ESTRUCTURA_UNIDADES A
			CROSS JOIN MESES_TABLE M
			WHERE M.NUMERO >= V_MES_INICIO AND M.NUMERO <= V_MES_FIN
			AND A.TIPO = 2
			UNION ALL
			SELECT
				A.NUMERO_LINEA,
				A.ID_SECCION,
				A.NOMBRE_SECCION,
				M.NUMERO MES,
				(
					(NVL(SUM(B.VALOR), 0) + NVL(SUM(K.VALOR), 0))
					-
					(NVL(SUM(C.VALOR), 0) + NVL(SUM(D.VALOR), 0) + NVL(SUM(E.VALOR), 0) + NVL(SUM(F.VALOR), 0) 
						+ NVL(SUM(G.VALOR), 0) + NVL(SUM(H.VALOR), 0) + NVL(SUM(I.VALOR), 0) + NVL(SUM(J.VALOR), 0))
				) VALOR
			FROM ESTRUCTURA_UNIDADES A
			CROSS JOIN MESES_TABLE M
			LEFT JOIN VALORES B 
				ON B.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND B.MES = M.NUMERO
				AND B.ID = 1
			LEFT JOIN VALORES C
				ON C.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND C.MES = M.NUMERO
				AND C.ID = 2
			LEFT JOIN VALORES D
				ON D.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND D.MES = M.NUMERO
				AND D.ID = 4
			LEFT JOIN VALORES E
				ON E.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND E.MES = M.NUMERO
				AND E.ID = 6
			LEFT JOIN VALORES F
				ON F.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND F.MES = M.NUMERO
				AND F.ID = 8
			LEFT JOIN VALORES G 
				ON G.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND G.MES = M.NUMERO
				AND G.ID = 9
			LEFT JOIN VALORES H
				ON H.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND H.MES = M.NUMERO
				AND H.ID = 11
			LEFT JOIN VALORES I
				ON I.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND I.MES = M.NUMERO
				AND I.ID = 14
			LEFT JOIN VALORES J
				ON J.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND J.MES = M.NUMERO
				AND J.ID = 15
			LEFT JOIN VALORES K
				ON K.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 2)
				AND K.MES = M.NUMERO
				AND K.ID = 13
			WHERE M.NUMERO >= V_MES_INICIO AND M.NUMERO <= V_MES_FIN
			AND A.TIPO = 2
			GROUP BY A.ID_SECCION, A.NOMBRE_SECCION, M.NUMERO, A.NUMERO_LINEA
		), CALCULO_BLOQUE_3 AS
		(
			SELECT
				A.NUMERO_LINEA,
				A.ID_SECCION,
				A.NOMBRE_SECCION,
				M.NUMERO MES,
				0 VALOR
			FROM ESTRUCTURA_UNIDADES A
			CROSS JOIN MESES_TABLE M
			WHERE M.NUMERO >= V_MES_INICIO AND M.NUMERO <= V_MES_FIN
			AND A.TIPO = 3
			UNION ALL
			SELECT
				A.NUMERO_LINEA,
				A.ID_SECCION,
				A.NOMBRE_SECCION,
				M.NUMERO MES,
				(
					(NVL(SUM(B.VALOR), 0) + NVL(SUM(K.VALOR), 0))
					-
					(NVL(SUM(C.VALOR), 0) + NVL(SUM(D.VALOR), 0) + NVL(SUM(E.VALOR), 0) + NVL(SUM(F.VALOR), 0) 
						+ NVL(SUM(G.VALOR), 0) + NVL(SUM(H.VALOR), 0) + NVL(SUM(I.VALOR), 0) + NVL(SUM(J.VALOR), 0))
				) VALOR
			FROM ESTRUCTURA_UNIDADES A
			CROSS JOIN MESES_TABLE M
			LEFT JOIN VALORES B 
				ON B.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND B.MES = M.NUMERO
				AND B.ID = 1
			LEFT JOIN VALORES C
				ON C.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND C.MES = M.NUMERO
				AND C.ID = 2
			LEFT JOIN VALORES D
				ON D.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND D.MES = M.NUMERO
				AND D.ID = 4
			LEFT JOIN VALORES E
				ON E.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND E.MES = M.NUMERO
				AND E.ID = 6
			LEFT JOIN VALORES F
				ON F.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND F.MES = M.NUMERO
				AND F.ID = 8
			LEFT JOIN VALORES G 
				ON G.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND G.MES = M.NUMERO
				AND G.ID = 9
			LEFT JOIN VALORES H
				ON H.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND H.MES = M.NUMERO
				AND H.ID = 11
			LEFT JOIN VALORES I
				ON I.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND I.MES = M.NUMERO
				AND I.ID = 14
			LEFT JOIN VALORES J
				ON J.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND J.MES = M.NUMERO
				AND J.ID = 15
			LEFT JOIN VALORES K
				ON K.CODIGO_DIVISION IN (SELECT CODIGO_DIVISION FROM CODIGO_SECCIONES_DIVISION WHERE TIPO = 3)
				AND K.MES = M.NUMERO
				AND K.ID = 13
			WHERE M.NUMERO >= V_MES_INICIO AND M.NUMERO <= V_MES_FIN
			AND A.TIPO = 3
			GROUP BY A.ID_SECCION, A.NOMBRE_SECCION, M.NUMERO, A.NUMERO_LINEA
		)
		SELECT
			NUMERO_LINEA,
			ID_SECCION,
			NOMBRE_SECCION,
			MES,
			VALOR
		FROM CALCULO_BLOQUE_1
		UNION ALL
		SELECT
			NUMERO_LINEA,
			ID_SECCION,
			NOMBRE_SECCION,
			MES,
			VALOR
		FROM CALCULO_BLOQUE_2
		UNION ALL
		SELECT
			NUMERO_LINEA,
			ID_SECCION,
			NOMBRE_SECCION,
			MES,
			VALOR
		FROM CALCULO_BLOQUE_3;
BEGIN
	IF V_VERSION = 1311 THEN
		FOR R_DATOS IN C_DATOS_HOMOLOGADAS
		LOOP
			V_T_REPORTE_FINANCIERO_EERR_CXU.EXTEND;
			V_T_REPORTE_FINANCIERO_EERR_CXU(V_T_REPORTE_FINANCIERO_EERR_CXU.LAST) := OBJ_REPORTE_FINANCIERO_EERR_CXU
			(
				R_DATOS.NUMERO_LINEA,
				R_DATOS.NOMBRE_SECCION,
				NULL,
				NULL,
				NULL,
				R_DATOS.MES,
				R_DATOS.ID_SECCION,
				R_DATOS.VALOR,
				NULL
			);
		END LOOP;
	ELSE
		FOR R_DATOS IN C_DATOS
		LOOP
			V_T_REPORTE_FINANCIERO_EERR_CXU.EXTEND;
			V_T_REPORTE_FINANCIERO_EERR_CXU(V_T_REPORTE_FINANCIERO_EERR_CXU.LAST) := OBJ_REPORTE_FINANCIERO_EERR_CXU
			(
				R_DATOS.NUMERO_LINEA,
				R_DATOS.NOMBRE_SECCION,
				NULL,
				NULL,
				NULL,
				R_DATOS.MES,
				R_DATOS.ID_SECCION,
				R_DATOS.VALOR,
				NULL
			);
		END LOOP;
	END IF;
	
    RETURN V_T_REPORTE_FINANCIERO_EERR_CXU;
END;